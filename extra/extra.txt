import os, shutil
from datetime import datetime
from fastapi import (
    FastAPI, Request, Form, Depends, File, UploadFile, status
)
from fastapi.responses import RedirectResponse, HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from . import database, models, auth
from .database import engine, Base, SessionLocal
from pydantic import BaseModel
from typing import List
from fastapi.exceptions import HTTPException
from fastapi.middleware import Middleware
from fastapi.middleware.cors import CORSMiddleware
from fastapi import HTTPException
from PIL import Image # type: ignore
import io
import re

# Create DB tables
Base.metadata.create_all(bind=engine)

app = FastAPI()
app.mount("/static", StaticFiles(directory="app/static"), name="static")
templates = Jinja2Templates(directory="app/templates")



class ProctorEventIn(BaseModel):
    reason: str
    timestamp: str

class ProctorBatch(BaseModel):
    events: List[ProctorEventIn]

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
        
def sanitize_filename(name: str) -> str:
    """Sanitize filename to prevent path traversal"""
    return re.sub(r'[^a-zA-Z0-9_]', '', name)



# ----- Auth Placeholder -----
def get_current_user(request: Request):
    user = request.cookies.get("user")
    if not user:
        raise HTTPException(status_code=401, detail="Not authenticated")
    return user

# Add middleware for auth checks
@app.middleware("http")
async def auth_middleware(request: Request, call_next):
    if request.url.path.startswith(("/recognize", "/dashboard", "/api")):
        try:
            user = get_current_user(request)
        except HTTPException:
            return RedirectResponse("/login")
    return await call_next(request)

# Add the missing current-user endpoint
@app.get("/api/current-user")
async def get_current_user_endpoint(user: str = Depends(get_current_user)):
    return {"name": user}


# ----- Routes -----
@app.get("/", include_in_schema=False)
async def root():
    return RedirectResponse("/login")

@app.get("/register")
def register_get(request: Request):
    return templates.TemplateResponse("register.html", {"request": request})

@app.post("/register")
async def register_post(
    request: Request,
    name: str = Form(...),
    password: str = Form(...),
    face_image: UploadFile = File(...),
    db: Session = Depends(get_db)
):
    MAX_FILE_SIZE = 5 * 1024 * 1024  # 5MB
    ALLOWED_MIME_TYPES = {"image/jpeg", "image/png"}

    try:
        # Validate username availability
        if db.query(models.User).filter_by(name=name).first():
            return templates.TemplateResponse(
                "register.html",
                {"request": request, "msg": "Username already exists"}
            )

        # Validate file size
        if face_image.size > MAX_FILE_SIZE: # type: ignore
            return templates.TemplateResponse(
                "register.html",
                {"request": request, "msg": "File too large (max 5MB)"}
            )

        # Validate MIME type
        if face_image.content_type not in ALLOWED_MIME_TYPES:
            return templates.TemplateResponse(
                "register.html",
                {"request": request, "msg": "Only JPEG/PNG images allowed"}
            )

        # Read and verify image contents
        contents = await face_image.read()
        try:
            Image.open(io.BytesIO(contents)).verify()
        except Exception as e:
            return templates.TemplateResponse(
                "register.html",
                {"request": request, "msg": f"Invalid image file: {str(e)}"}
            )

        # Sanitize filename
        safe_name = sanitize_filename(name)
        if not safe_name:
            return templates.TemplateResponse(
                "register.html",
                {"request": request, "msg": "Invalid username format"}
            )

        # Create upload directory
        upload_dir = "app/static/uploads"
        os.makedirs(upload_dir, exist_ok=True)
        file_path = os.path.join(upload_dir, f"{safe_name}.jpg")

        # Save file
        try:
            with open(file_path, "wb") as buffer:
                buffer.write(contents)
        except IOError as e:
            return templates.TemplateResponse(
                "register.html",
                {"request": request, "msg": f"File save failed: {str(e)}"}
            )

        # Create user
        try:
            hashed = auth.hash_password(password)
            user = models.User(name=safe_name, password_hash=hashed)
            db.add(user)
            db.commit()
        except Exception as e:
            db.rollback()
            # Clean up uploaded file if DB fails
            if os.path.exists(file_path):
                os.remove(file_path)
            return templates.TemplateResponse(
                "register.html",
                {"request": request, "msg": f"Registration failed: {str(e)}"}
            )

        # Automatically log in user
        response = RedirectResponse(
            url="/dashboard",
            status_code=status.HTTP_303_SEE_OTHER
        )
        response.set_cookie(
            key="user",
            value=safe_name,
            httponly=True,
            samesite="Lax", # type: ignore
            max_age=3600
        )
        return response

    except Exception as e:
        return templates.TemplateResponse(
            "register.html",
            {"request": request, "msg": f"Unexpected error: {str(e)}"}
        )

@app.get("/login")
def login_get(request: Request):
    return templates.TemplateResponse("login.html", {"request": request})

# Update the login response to set secure cookies
@app.post("/login")
def login_post(
    request: Request,
    name: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(get_db)
):
    user = db.query(models.User).filter_by(name=name).first()
    if not user or not auth.verify_password(password, user.password_hash):
        return templates.TemplateResponse("login.html", {"request": request, "msg": "Invalid"})
    response = RedirectResponse("/dashboard", status_code=status.HTTP_303_SEE_OTHER)
    response.set_cookie(
        key="user",
        value=name,
        httponly=True,
        samesite="Lax" # type: ignore
    )
    return response


@app.get("/dashboard")
async def dashboard(request: Request, user=Depends(get_current_user)):
    if not user:
        return RedirectResponse("/login")
    return templates.TemplateResponse("dashboard.html", {"request": request, "user": user})

@app.get("/recognize")
async def recognize(request: Request, user=Depends(get_current_user)):
    if not user:
        return RedirectResponse("/login")
    return templates.TemplateResponse("recognize.html", {"request": request, "user": user})

@app.post("/api/proctor/events")
async def proctor_events(
    batch: ProctorBatch,
    user: str = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    # Log raw payload for debugging
    print("Received batch:", batch.json())
    saved = 0

    for evt in batch.events:
        ts_str = evt.timestamp
        # Normalize trailing 'Z' to '+00:00' for fromisoformat
        if ts_str.endswith("Z"):
            ts_str = ts_str[:-1] + "+00:00"
        try:
            ts = datetime.fromisoformat(ts_str)
        except Exception as e:
            print(f"Timestamp parsing error for '{evt.timestamp}':", e)
            return JSONResponse(
                status_code=400,
                content={"error": f"Invalid timestamp '{evt.timestamp}'"}
            )

        # Save the event
        pe = models.ProctorEvent(
            user_id= user,   # replace with real user later
            reason=evt.reason,
            timestamp=ts
        )
        db.add(pe)
        saved += 1

    try:
        db.commit()
    except Exception as e:
        print("DB commit error:", e)
        return JSONResponse(
            status_code=500,
            content={"error": "Database error"}
        )

    return {"status": "ok", "saved": saved}




<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

<link rel="stylesheet" href="{{ url_for('static', path='css/style.css') }}">

    




    # annotated-types==0.7.0
# anyio==4.9.0
# bcrypt==4.0.1
# certifi==2025.4.26
# click==8.1.8
# cloudinary==1.44.0
# cmake==4.0.2
# colorama==0.4.6
# dlib==19.24.8
# dnspython==2.7.0
# email_validator==2.2.0
# exceptiongroup==1.3.0
# face-recognition==1.3.0
# face-recognition-models==0.3.0
# fastapi==0.115.12
# fastapi-cli==0.0.7
# greenlet==3.2.2
# h11==0.16.0
# httpcore==1.0.9
# httptools==0.6.4
# httpx==0.28.1
# idna==3.10
# itsdangerous==2.2.0
# Jinja2==3.1.6
# markdown-it-py==3.0.0
# MarkupSafe==3.0.2
# mdurl==0.1.2
# numpy==2.2.5
# opencv-python==4.11.0.86
# orjson==3.10.18
# passlib==1.7.4
# pillow==11.2.1
# pydantic==2.11.4
# pydantic-extra-types==2.10.4
# pydantic-settings==2.9.1
# pydantic_core==2.33.2
# Pygments==2.19.1
# python-dotenv==1.1.0
# python-multipart==0.0.20
# PyYAML==6.0.2
# rich==14.0.0
# rich-toolkit==0.14.6
# shellingham==1.5.4
# six==1.17.0
# sniffio==1.3.1
# SQLAlchemy==2.0.40
# starlette==0.46.2
# typer==0.15.4
# typing-inspection==0.4.0
# typing_extensions==4.13.2
# ujson==5.10.0
# urllib3==2.4.0
# uvicorn==0.34.2
# watchfiles==1.0.5
# websockets==15.0.1